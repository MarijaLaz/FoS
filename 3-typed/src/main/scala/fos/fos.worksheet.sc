import fos.SimplyTyped._
def input(str: String) = new lexical.Scanner(str)
def parse[T](str: String, parser: Parser[T]) =
    phrase(parser)(input(str))



parse("x", term)
parse("succ 0", term)
parse("pred 0", term)
parse("iszero 0", term)
parse("4", term)
parse("(x x)", term)
parse("(x (x x))", term)
parse("\\x:Bool. x", term)
parse("\\x:Bool->Bool. x", term)
parse("\\x:Bool->(Bool->Bool). x", term)
parse("(\\x:Nat->Bool. (\\y:Nat.(x y))) (\\x:Nat.(iszero x)) 0", term)
parse("let x:Bool = true in iszero x", term)
parse("{true, false}", term)
parse("snd {true, false}", term)
parse("\\x:Nat*Nat->Bool. x", term)
parse("\\x:Nat*Nat->Bool*Nat. x", term)
parse("true",term)
reduce(parse("(\\x:Bool.x) true", term).get)
// reduce(parse("true",term).get)
parse("if true then true else false", term)
// typeof(List[(String, Type)], parse("0", term).get)
reduce(parse("(\\x:Nat->Bool.(\\y:Nat.(x y)))(\\x:Nat.(iszero x))",term).get)
parse("\\y:Nat.(\\x:Nat.iszero x) y", term)
parse("(\\x:Nat->Bool.(\\y:Nat.(x y)))(\\x:Nat.(iszero x))0",term)
reduce(parse("(\\x:Nat->Bool. (\\y:Nat.(x y))) (\\x:Nat.(iszero x)) 0", term).get)
reduce(parse("if true then false else false", term).get)

(parse("\\y:Nat.(\\x:Nat.iszero x) y", term).get)
(parse("(\\y:Nat.(\\x:Nat.iszero x)) y", term).get)

reduce(parse("if true then if false then false else succ succ 0 else 0", term).get)
reduce(parse("fst {iszero 0, false}", term).get)
reduce(parse("fst {true, false}", term).get)